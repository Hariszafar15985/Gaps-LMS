function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() { }; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

(function ($) {
    "use strict"; // *******************
    // create
    // *****************
    $('body').on('click', '#add_multiple_question', function (e) {
        e.preventDefault();
        var quizId = $(this).attr('data_quiz_id');
        var multipleQuestionModal = $('#multipleQuestionModal').clone();
        var id = 'correctAnswerSwitch' + randomString();
        multipleQuestionModal.find('label.js-switch').attr('for', id);
        multipleQuestionModal.find('input.js-switch').attr('id', id);
        // Find the .quiz-questions-form element and extract the data-quiz-id attribute value
        var quizQuestionsForm = multipleQuestionModal.find('.quiz-questions-form');
        var quizIdInput = quizQuestionsForm.find('input[name="quiz_id"]');
        quizIdInput.val(quizId);

        var random_id = randomString();
        multipleQuestionModal.find('.panel-file-manager').attr('data-input', random_id);
        multipleQuestionModal.find('.main-answer-row').removeClass('main-answer-row').addClass('main-answer-box');
        var copyHtml = multipleQuestionModal.prop('innerHTML');
        copyHtml = copyHtml.replaceAll('record', random_id);
        copyHtml = copyHtml.replaceAll('ans_tmp', 'ans_temp');
        multipleQuestionModal.html(copyHtml);
        Swal.fire({
            html: multipleQuestionModal.html(),
            showCancelButton: false,
            showConfirmButton: false,
            customClass: {
                content: 'p-0 text-left'
            },
            width: '48rem'
        });
    });

    $('body').on('click', '.add-answer-btn', function (e) {
        e.preventDefault();
        var mainRow = $('.add-answer-container .main-answer-box');
        var copy = mainRow.clone();
        copy.removeClass('main-answer-box');
        copy.find('.answer-remove').removeClass('d-none');
        var id = 'correctAnswerSwitch' + randomString();
        copy.find('label.js-switch').attr('for', id);
        copy.find('input.js-switch').attr('id', id);
        copy.find('input[type="checkbox"]').prop('checked', false);
        var copyHtml = copy.prop('innerHTML');
        var nameId = randomString();
        copyHtml = copyHtml.replaceAll('ans_temp', nameId);
        copyHtml = copyHtml.replace(/\[\d+\]/g, '[' + nameId + ']');
        copy.html(copyHtml);
        copy.find('input[type="checkbox"]').prop('checked', false);
        copy.find('input[type="text"]').val('');
        mainRow.parent().append(copy);
    });
    $('body').on('click', '.answer-remove', function (e) {
        e.preventDefault();
        $(this).closest('.add-answer-card').remove();
    });

    function randomString() {
        var text = "";
        var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

        for (var i = 0; i < 5; i++) {
            text += possible.charAt(Math.floor(Math.random() * possible.length));
        }

        return text;
    }



    $("body").on("click", "#add_infoText_question", function (e) {
        e.preventDefault();

        // Generate a unique identifier for the modal
        let swalIdentifier = Math.floor(new Date().getTime() / 1000);

        // Clone the informativeQuestionModal content
        var informativeQuestionModal = $(".informativeQuestionModal").clone();

        // Find the .quiz-questions-form element and extract the data-quiz-id attribute value
        var quizQuestionsForm = informativeQuestionModal.find('.quiz-questions-form');
        var quizId = $(this).attr('data_quiz_id');
        var quizIdInput = quizQuestionsForm.find('input[name="quiz_id"]');
        quizIdInput.val(quizId);

        // Open the modal using Swal
        Swal.fire({
            html: informativeQuestionModal.html(),
            showCancelButton: false,
            showConfirmButton: false,
            customClass: {
                content: `p-0 text-left el_${swalIdentifier}`
            },
            width: "48rem"
        });

        // Remove any previous note editor created by Summernote
        $(`.el_${swalIdentifier} .note-editor.note-frame.card`).remove();

        // Initialize Summernote for the textarea
        $("textarea.summernote").summernote({
            /* set editable area's height */
            height: 150,
            spellCheck: true,
            toolbar: [
                ["style", ["bold", "italic", "underline", "clear"]],
                ["color", ["color"]],
                ["para", ["ul", "ol", "paragraph"]],
                ["view", ["codeview"]]
            ],
            callbacks: {
                onChange: function (contents) {
                    let answersCountFITB = 0;
                    let parentContainer = $(`.el_${swalIdentifier}`);
                    let previewElem = parentContainer.find("div.preview_div");
                    previewElem.html(contents);
                }
            }
        });
    });


    $('body').on('click', '#add_descriptive_question', function (e) {
        e.preventDefault();
        var multipleQuestionModal = $('#descriptiveQuestionModal');
        var clone = multipleQuestionModal.clone();
        // Find the .quiz-questions-form element and extract the data-quiz-id attribute value
        var quizQuestionsForm = clone.find('.quiz-questions-form');
        var quizId = $(this).attr('data_quiz_id');
        var quizIdInput = quizQuestionsForm.find('input[name="quiz_id"]');
        quizIdInput.val(quizId);

        var random_id = randomString();
        var copyHtml = clone.prop('innerHTML');
        copyHtml = copyHtml.replaceAll('record', random_id);
        copyHtml = copyHtml.replaceAll('ans_tmp', 'ans_temp');
        clone.html(copyHtml);
        Swal.fire({
            html: clone.html(),
            showCancelButton: false,
            showConfirmButton: false,
            customClass: {
                content: 'p-0 text-left'
            },
            width: '48rem'
        });
    });


    $("body").on("click", "#add_matchingListText_question", function (e) {
        e.preventDefault();
        let swalIdentifier = Math.floor(new Date().getTime() / 1000);
        var quizId = $(this).attr('data-quiz-id');
        var clone = $("#matchingListTextQuestionModal").clone();
        var quizQuestionsForm = clone.find('.quiz-questions-form');
        var quizId = $(this).attr('data_quiz_id');
        var quizIdInput = quizQuestionsForm.find('input[name="quiz_id"]');
        quizIdInput.val(quizId);

        Swal.fire({
            html: clone.html(),
            showCancelButton: false,
            showConfirmButton: false,
            customClass: {
                content: `p-0 text-left el_${swalIdentifier}`
            },
            width: "60%"
        });
        $("body").on("click", `.el_${swalIdentifier} #add_text_pair`, function (e) {
            addPair(swalIdentifier, "text");
        });
    });

    $("body").on("click", "#add_matchingListImage_question", function (e) {
        e.preventDefault();
        let swalIdentifier = Math.floor(new Date().getTime() / 1000);
        var quizId = $(this).attr('data-quiz-id');
        var clone = $("#matchingListImageQuestionModal").clone();
        var quizQuestionsForm = clone.find('.quiz-questions-form');
        var quizId = $(this).attr('data_quiz_id');
        var quizIdInput = quizQuestionsForm.find('input[name="quiz_id"]');
        quizIdInput.val(quizId);
        Swal.fire({
            html: clone.html(),
            showCancelButton: false,
            showConfirmButton: false,
            customClass: {
                content: `p-0 text-left el_${swalIdentifier}`
            },
            width: "60%"
        });
        $("body").on("click", `.el_${swalIdentifier} #add_image_pair`, function (e) {
            addPair(swalIdentifier, "image");
        });
    });

    $("body").on("click", "#add_fileUpload_question", function (e) {
        e.preventDefault();
        // alert("clicked")
        let swalIdentifier = Math.floor(new Date().getTime() / 1000);
        var a = $(this).attr("data-quiz-id"),
            i = $("#fileUploadQuestionModal").clone();
        Swal.fire({
            html: i.html(),
            showCancelButton: !1,
            showConfirmButton: !1,
            customClass: {
                content: `p-0 text-left el_${swalIdentifier}`
            },
            width: "60%"
        });
    });

    $("body").on("click", "#add_fillInBlank_question", function (e) {
        e.preventDefault();
        let swalIdentifier = Math.floor(new Date().getTime() / 1000);
        var quizId = $(this).attr('data-quiz-id');
        var blankQuestionModal = $('#fillBlankQuestionModal');
        var clone = blankQuestionModal.clone();
        // Find the .quiz-questions-form element and extract the data-quiz-id attribute value
        var quizQuestionsForm = clone.find('.quiz-questions-form');
        var quizId = $(this).attr('data_quiz_id');
        var quizIdInput = quizQuestionsForm.find('input[name="quiz_id"]');
        quizIdInput.val(quizId);
        // var a = $(this).attr("data-quiz-id"),
        //     n = $("#fillBlankQuestionModal").clone();
        Swal.fire({
            html: clone.html(),
            showCancelButton: !1,
            showConfirmButton: !1,
            customClass: {
                content: `p-0 text-left el_${swalIdentifier}`
            },
            width: "60%"
        });
        /* remove any previous note editor created by summernote */
        $(`.el_${swalIdentifier} .note-editor.note-frame.card`).remove();
        $('textarea.summernote').summernote({
            /* set editable area's height */
            height: 150,
            spellCheck: true,
            toolbar: [
                ['style', ['bold', 'italic', 'underline', 'clear']],
                ['color', ['color']],
                ['para', ['ul', 'ol', 'paragraph']],
                ['view', ['codeview']],
                ['custom', ['insertBlank']]
            ],
            buttons: {
                insertBlank: insertBlankButton
            },
            callbacks: {
                onChange: function (contents) {
                    let answersCountFITB = 0;
                    let parentContainer = $(`.el_${swalIdentifier}`);
                    let previewElem = parentContainer.find('div.preview_div');
                    while (contents.indexOf('{blank}') > -1) {
                        let blankIdentifier = { 'name': `answer[${answersCountFITB}]`, 'id': `answer_${answersCountFITB}` };
                        /* get existing value of input if it has already been entered by user */
                        let dataAttribName = `data-answer_${answersCountFITB}`;
                        let inputVal = "";
                        if (previewElem.attr(dataAttribName)) {
                            inputVal = previewElem.attr(dataAttribName);
                        }
                        contents = contents.replace('{blank}', ` <textarea type="text" onkeyup="updateFITBPreviewAttrib(${answersCountFITB}, ${swalIdentifier})" name="${blankIdentifier.name}" id="${blankIdentifier.id}" class="form-control textareaField blankInput" value="">${inputVal}</textarea>`);
                        answersCountFITB++;
                    }
                    previewElem.html(contents);
                }
            }
        });
    });

    $('body').on('change', '.js-switch', function () {
        var $this = $(this);
        var parent = $this.closest('.js-switch-parent');

        if (this.checked) {
            $('.js-switch').each(function () {
                var switcher = $(this);
                var switcher_parent = switcher.closest('.js-switch-parent');
                var switcher_input = switcher_parent.find('input[type="checkbox"]');
                switcher_input.prop('checked', false);
            });
            $this.prop('checked', true);
        }
    });
    $('body').on('click', '.save-question', function (e) {
        e.preventDefault();
        var $this = $(this);
        var form = $this.closest('.quiz-questions-form');
        var action = form.attr('data-action');
        var data = serializeObjectByTag(form);
        $this.addClass('loadingbar primary').prop('disabled', true);
        form.find('input').removeClass('is-invalid');
        form.find('textarea').removeClass('is-invalid');
        $.post(action, data, function (result) {
            if (result && result.code === 200) {
                Swal.fire({
                    icon: 'success',
                    html: '<h3 class="font-20 text-center text-dark-blue py-25">' + saveSuccessLang + '</h3>',
                    showConfirmButton: false,
                    width: '25rem'
                });
                setTimeout(function () {
                    window.location.reload();
                }, 500);
            }
        }).fail(function (err) {
            $this.removeClass('loadingbar primary').prop('disabled', false);
            var errors = err.responseJSON;

            if (errors && errors.errors) {
                Object.keys(errors.errors).forEach(function (key) {
                    var error = errors.errors[key];
                    var element = form.find('.js-ajax-' + key);
                    element.addClass('is-invalid');
                    element.parent().find('.invalid-feedback').text(error[0]);
                });
            }
        });
    });

    $('body').on('click', '.js-submit-quiz-form', function (e) {
        e.preventDefault();
        var $this = $(this);
        var form = $this.closest('.quiz-form');
        var data = serializeObjectByTag(form);
        var action = form.attr('data-action');
        $this.addClass('loadingbar primary').prop('disabled', true);
        form.find('input').removeClass('is-invalid');
        form.find('textarea').removeClass('is-invalid');
        $.post(action, data, function (result) {
            if (result && result.code === 200) {
                Swal.fire({
                    icon: 'success',
                    html: '<h3 class="font-20 text-center text-dark-blue">' + saveSuccessLang + '</h3>',
                    showConfirmButton: false
                });
                setTimeout(function () {
                    if (result.redirect_url && result.redirect_url !== '') {
                        window.location.href = result.redirect_url;
                    } else {
                        window.location.reload();
                    }
                }, 2000);
            }
        }).fail(function (err) {
            $this.removeClass('loadingbar primary').prop('disabled', false);
            var errors = err.responseJSON;

            if (errors && errors.errors) {
                Object.keys(errors.errors).forEach(function (key) {
                    var error = errors.errors[key];
                    var element = form.find('.js-ajax-' + key);
                    element.addClass('is-invalid');
                    element.parent().find('.invalid-feedback').text(error[0]);
                });
            }
        });
    }); // *******************
    // edit
    // *****************
    $("body").on("click", ".edit_question", function (e) {
        e.preventDefault();
        const $this = $(this);
        const question_id = $this.attr("data-question-id");
        let swalIdentifier = Math.floor(new Date().getTime() / 1000);

        loadingSwl();

        $.get("/admin/quizzes-questions/" + question_id + "/edit", function (
            result
        ) {
            if (result && result.html) {
                let $html = '<div id="editQuestion">' + result.html + "</div>";
                Swal.fire({
                    html: $html,
                    showCancelButton: false,
                    showConfirmButton: false,

                    customClass: {
                        content: `p-0 text-left el_${swalIdentifier}`
                    },
                    width: "48rem",
                    onOpen: () => {
                        const editModal = $("#editQuestion");
                        editModal
                            .find(".main-answer-row")
                            .removeClass("main-answer-row")
                            .addClass("main-answer-box");

                        const random_id = randomString();
                        editModal
                            .find(".panel-file-manager")
                            .first()
                            .attr("data-input", random_id);
                        editModal
                            .find(".lfm-input")
                            .first()
                            .attr("id", random_id);

                        const id = "correctAnswerSwitch" + randomString();
                        editModal
                            .find("label.js-switch")
                            .first()
                            .attr("for", id);
                        editModal
                            .find("input.js-switch")
                            .first()
                            .attr("id", id);
                    }
                });
                if (
                    $html.indexOf("fillBlankQuestionModal") &&
                    $html.indexOf("summernote") > -1
                ) {
                    $("textarea.summernote").summernote({
                        /* set editable area's height */
                        height: 150,
                        spellCheck: true,
                        toolbar: [
                            ["style", ["bold", "italic", "underline", "clear"]],
                            ["color", ["color"]],
                            ["para", ["ul", "ol", "paragraph"]],
                            ["view", ["codeview"]],
                            ["custom", ["insertBlank"]]
                        ],
                        buttons: {
                            insertBlank: insertBlankButton
                        },
                        callbacks: {
                            onChange: function (contents) {
                                let answersCountFITB = 0;
                                let parentContainer = $(
                                    `.el_${swalIdentifier}`
                                );
                                let previewElem = parentContainer.find(
                                    "div.preview_div"
                                );
                                while (contents.indexOf("{blank}") > -1) {
                                    let blankIdentifier = {
                                        name: `answer[${answersCountFITB}]`,
                                        id: `answer_${answersCountFITB}`
                                    };
                                    /* get existing value of input if it has already been entered by user */
                                    let dataAttribName = `data-answer_${answersCountFITB}`;
                                    let inputVal = "";
                                    if (previewElem.attr(dataAttribName)) {
                                        inputVal = previewElem.attr(
                                            dataAttribName
                                        );
                                    }
                                    contents = contents.replace(
                                        "{blank}",
                                        ` <input type="text" onkeyup="updateFITBPreviewAttrib(${answersCountFITB}, ${swalIdentifier})" name="${blankIdentifier.name}" id="${blankIdentifier.id}" class="form-control blankInput" value="${inputVal}" />`
                                    );
                                    answersCountFITB++;
                                }

                                previewElem.html(contents);
                            },
                            onInit: function () {
                                let answersCountFITB = 0;
                                let parentContainer = $(
                                    `.el_${swalIdentifier}`
                                );
                                let contents = $(
                                    ".summernote",
                                    parentContainer
                                ).val();
                                let previewElem = parentContainer.find(
                                    "div.preview_div"
                                );
                                console.log(
                                    parentContainer,
                                    contents,
                                    previewElem
                                );
                                while (contents.indexOf("{blank}") > -1) {
                                    let blankIdentifier = {
                                        name: `answer[${answersCountFITB}]`,
                                        id: `answer_${answersCountFITB}`
                                    };
                                    /* get existing value of input if it has already been entered by user */
                                    let dataAttribName = `data-answer_${answersCountFITB}`;
                                    let inputVal = "";
                                    if (previewElem.attr(dataAttribName)) {
                                        inputVal = previewElem.attr(
                                            dataAttribName
                                        );
                                    }
                                    contents = contents.replace(
                                        "{blank}",
                                        ` <input type="text" onkeyup="updateFITBPreviewAttrib(${answersCountFITB}, ${swalIdentifier})" name="${blankIdentifier.name}" id="${blankIdentifier.id}" class="form-control blankInput" value="${inputVal}" />`
                                    );
                                    answersCountFITB++;
                                }
                                previewElem.html(contents);
                            }
                        }
                    });
                    $("textarea.summernote").trigger("summernote.change");
                }
            }
        });
    });

    $('body').on('change', '.js-quiz-question-locale', function (e) {
        e.preventDefault();
        var $this = $(this);
        var $form = $(this).closest('.quiz-questions-form');
        var locale = $this.val();
        var item_id = $this.attr('data-id');
        $this.addClass('loadingbar gray');
        var path = adminPanelPrefix + '/quizzes-questions/' + item_id + '/getQuestionByLocale?locale=' + locale;
        $.get(path, function (result) {
            var question = result.question;

            if (question.type === 'descriptive') {
                var fields = ['title', 'correct'];
                Object.keys(question).forEach(function (key) {
                    var value = question[key];

                    if ($.inArray(key, fields) !== -1) {
                        var element = $form.find('.js-ajax-' + key);
                        element.val(value);
                    }
                });
            } else {
                $form.find('.js-ajax-title').val(question.title);

                if (question.quizzes_questions_answers && question.quizzes_questions_answers.length) {
                    var answers = question.quizzes_questions_answers;

                    var _iterator = _createForOfIteratorHelper(answers),
                        _step;

                    try {
                        for (_iterator.s(); !(_step = _iterator.n()).done;) {
                            var answer = _step.value;

                            if (answer) {
                                $form.find('.js-ajax-answer-title-' + answer.id).val(answer.title);
                            }
                        }
                    } catch (err) {
                        _iterator.e(err);
                    } finally {
                        _iterator.f();
                    }
                }
            }

            $this.removeClass('loadingbar gray');
        }).fail(function (err) {
            $this.removeClass('loadingbar gray');
        });
    });
    $('body').on('change', '.js-ajax-display_limited_questions', function () {
        var $input = $('.js-display-limited-questions-count-field');
        $input.find('input').val('');

        if (this.checked) {
            $input.removeClass('d-none');
        } else {
            $input.addClass('d-none');
        }
    });
    $(document).ready(function () {
        var style = getComputedStyle(document.body);
        var primaryColor = style.getPropertyValue('--primary');

        function updateToDatabase(table, quizId, idString) {
            $.post(adminPanelPrefix + '/quizzes/' + quizId + '/order-items', {
                table: table,
                items: idString
            }, function (result) {
                if (result && result.title && result.msg) {
                    $.toast({
                        heading: result.title,
                        text: result.msg,
                        bgColor: primaryColor,
                        textColor: 'white',
                        hideAfter: 10000,
                        position: 'bottom-right',
                        icon: 'success'
                    });
                }
            });
        }

        function setSortable(target) {
            if (target.length) {
                target.sortable({
                    group: 'no-drop',
                    handle: '.move-icon',
                    axis: "y",
                    update: function update(e, ui) {
                        var sortData = target.sortable('toArray', {
                            attribute: 'data-id'
                        });
                        var table = e.target.getAttribute('data-order-table');
                        var quizId = e.target.getAttribute('data-quiz');
                        updateToDatabase(table, quizId, sortData.join(','));
                    }
                });
            }
        }

        var items = [];
        var draggableContentLists = $('.draggable-questions-lists');

        if (draggableContentLists.length) {
            var _iterator2 = _createForOfIteratorHelper(draggableContentLists),
                _step2;

            try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                    var item = _step2.value;
                    items.push($(item).attr('data-drag-class'));
                }
            } catch (err) {
                _iterator2.e(err);
            } finally {
                _iterator2.f();
            }
        }

        if (items.length) {
            var _iterator3 = _createForOfIteratorHelper(items),
                _step3;

            try {
                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                    var _item = _step3.value;
                    var tag = $('.' + _item);

                    if (tag.length) {
                        setSortable(tag);
                    }
                }
            } catch (err) {
                _iterator3.e(err);
            } finally {
                _iterator3.f();
            }
        }
    });
    /* feather icons */
    // **
    // **

    feather.replace();

    //insert blank button function used in fill in th eblank section of  the quiz
    function insertBlankButton(context) {
        var ui = $.summernote.ui;

        /* create button */
        var button = ui.button({
            contents: '<i class="fa fa-minus fa-2x"></i>&nbsp;Blank',
            tooltip: "Insert Blank",
            click: function () {
                /* invoke insertText method with 'hello' on editor module. */
                context.invoke("editor.insertText", "{blank}");
            }
        });

        return button.render(); /* return button as jquery object */
    }
})(jQuery);


//functioin to add pairs
function addPair(swalIdentifier, pairType) {
    let parentContainer = null;
    if (parseInt(swalIdentifier) > 0) {
        parentContainer = $(`.el_${swalIdentifier}`);
    } else {
        parentContainer = $(`.${swalIdentifier}`);
    }
    pairIdentifierEl = $(`input[name='pairIdentifier']`, parentContainer);
    pairIdentifier = parseInt(pairIdentifierEl.val());
    pairIdentifier++;
    if (pairType === "text") {
        let html = `<div class="col-3 pair_container">
            <div id="pair_${pairIdentifier}" class="row matchingPair">
                <div class="col-12">
                <button type="button" class="removePair-btn btn btn-sm btn-background-transparent text-danger position-absolute" title="Remove Pair" onclick="removePair(${pairIdentifier}, ${swalIdentifier})" style="right:0; height:1em; font-size:1.5em"><span aria-hidden="true">&times;</span></button>
                    <div class="form-group">
                        <label class="input-label">Text</label>
                        <input type="text" name="answers[${pairIdentifier}][text]" class="form-control" required value="" />
                    </div>
                    <div class="form-group">
                        <label class="input-label">Description</label>
                        <textarea type="text" name="answers[${pairIdentifier}][description]" class="form-control" required ></textarea>
                    </div>
                </div>
            </div>
        </div>`;
        $(".matchingPairs", parentContainer).append(html);
    } else {
        let html = `<div class="col-3 pair_container">
                <div id="pair_${pairIdentifier}" class="row matchingPair">
                    <div class="col-12">
                    <button type="button" class="removePair-btn btn btn-sm btn-background-transparent text-danger position-absolute" title="Remove Pair" onclick="removePair(${pairIdentifier}, '${swalIdentifier}')" style="right:0; height:1em; font-size:1.5em"><span aria-hidden="true">&times;</span></button>
                        <div class="form-group">
                            <label class="input-label">Image</label>
                            <div class="dropzone mx-auto cursor-pointer" onclick="this.querySelector('input[type=file]').click();">
                                <img src="/assets/default/img/upload.svg" id="preview_${pairIdentifier}" required class="upload-icon" / width ="150" height= "350">
                                <input type="file" id="file_${pairIdentifier}" onchange="handleFileSelect(this, this.closest('.matchingListImageQuestionModal_modal') )" accept="image/*" name="answers[${pairIdentifier}][file]" required class="d-none upload-input cursor-pointer" />
                                <input type="hidden" name="answers[${pairIdentifier}][image]" id="image_${pairIdentifier}" required value="" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="input-label">Text</label>
                            <input type="text" name="answers[${pairIdentifier}][text]" class="form-control" required />
                        </div>
                    </div>
                </div>
            </div>`;
        $(".matchingPairs", parentContainer).append(html);
    }

    pairIdentifierEl.val(pairIdentifier);
}


//function to remove pair of matching list
function removePair(pairId, swalIdentifier) {
    let parentContainer = null;
    if (parseInt(swalIdentifier) > 0) {
        parentContainer = $(`.el_${swalIdentifier}`);
    } else {
        parentContainer = $(`.${swalIdentifier}`);
    }
    console.log(parentContainer);
    let elem = $(`#pair_${pairId}`, parentContainer);
    console.log(elem);
    let container = elem.closest(".pair_container");
    container.remove();
}

function handleFileSelect(elem, elemModal) {
    let elemId = elem.id;
    console.log(elemId);
    let imgElKey = elemId.replace("file", "image");
    let previewElKey = elemId.replace("file", "preview");
    console.log(previewElKey);
    let base64Elem = $(`#${imgElKey}`, elemModal);
    let previewElem = $(`#${previewElKey}`, elemModal);
    console.log(previewElem);
    console.log(base64Elem);
    let f = elem.files[0]; /* FileList object */
    console.log(f);
    let mimeType = f.type;
    let reader = new FileReader();
    /* Closure to capture the file information. */
    reader.onload = (function (theFile) {
        return function (e) {
            let binaryData = e.target.result;
            /* Converting Binary Data to base 64 */
            let base64String = window.btoa(binaryData);
            /* showing file converted to base64 */
            let imgString = `data:${mimeType};base64,${base64String}`;
            base64Elem.val(`${imgString}`);
            console.log(imgString);
            // previewElem.attr("src", `${imgString}`);
            previewElem.attr("src", `${imgString}`);
            previewElem.removeClass("upload-icon");
            previewElem.addClass("my-auto");
        };
    })(f);
    /* Read in the image file as a data URL. */
    reader.readAsBinaryString(f);
}

//function that will trigger on click of the image in image matching model

function inputFileClicked(currentElem)
{
    currentElem.querySelector(`input[type='file']`).click();
}
