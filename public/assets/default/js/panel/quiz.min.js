! function(t) {
    "use strict";

    var insertBlankButton = function(context) {
        var ui = $.summernote.ui;

        /* create button */
        var button = ui.button({
            contents: '<i class="fa fa-minus fa-2x"></i>&nbsp;Blank',
            tooltip: 'Insert Blank',
            click: function() {
                /* invoke insertText method with 'hello' on editor module. */
                context.invoke('editor.insertText', '{blank}');
            }
        });

        return button.render(); /* return button as jquery object */
    };

    function e() {
        for (var t = "", e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", a = 0; a < 5; a++) t += e.charAt(Math.floor(Math.random() * e.length));
        return t
    }
    t("body").on("click", "#add_multiple_question", function(a) {
        a.preventDefault();
        var i = t(this).attr("data-quiz-id"),
            n = t(".multipleQuestionModal" + i).clone(),
            r = "correctAnswerSwitch" + e();
        n.find("label.js-switch").attr("for", r), n.find("input.js-switch").attr("id", r);
        var o = e();
        n.find(".panel-file-manager").attr("data-input", o), n.find(".lfm-input").attr("id", o), n.find(".main-answer-row").removeClass("main-answer-row").addClass("main-answer-box"), Swal.fire({
            html: n.html(),
            showCancelButton: !1,
            showConfirmButton: !1,
            customClass: {
                content: "p-0 text-left"
            },
            width: "60%"
        })
    }), t("body").on("click", ".add-answer-btn", function(a) {
        a.preventDefault();
        var i = t(".add-answer-container .main-answer-box"),
            n = i.clone();
        n.removeClass("main-answer-box"), n.find(".answer-remove").removeClass("d-none");
        var r = "correctAnswerSwitch" + e();
        n.find("label.js-switch").attr("for", r), n.find("input.js-switch").attr("id", r);
        var o = e();
        n.find(".panel-file-manager").attr("data-input", o), n.find(".lfm-input").attr("id", o), n.find('input[type="checkbox"]').prop("checked", !1);
        var s = n.prop("innerHTML"),
            d = e();
        s = (s = s.replace(/\[record\]/g, "[" + d + "]")).replace(/\[\d+\]/g, "[" + d + "]"), n.html(s), n.find('input[type="checkbox"]').prop("checked", !1), n.find('input[type="text"]').val(""), i.parent().append(n)
    }), t("body").on("click", ".answer-remove", function(e) {
        e.preventDefault(), t(this).closest(".add-answer-card").remove()
    }), t("body").on("click", "#add_descriptive_question", function(e) {
        e.preventDefault();
        var a = t(this).attr("data-quiz-id"),
            i = t(".descriptiveQuestionModal" + a).clone();
        Swal.fire({
            html: i.html(),
            showCancelButton: !1,
            showConfirmButton: !1,
            customClass: {
                content: "p-0 text-left"
            },
            width: "60%"
        })
    }), t("body").on("click", "#add_fillInBlank_question", function(e) {
        e.preventDefault();
        let swalIdentifier = Math.floor(new Date().getTime() / 1000);
        var a = t(this).attr("data-quiz-id"),
            n = t(".fillBlankQuestionModal" + a).clone();
        Swal.fire({
            html: n.html(),
            showCancelButton: !1,
            showConfirmButton: !1,
            customClass: {
                content: `p-0 text-left el_${swalIdentifier}`
            },
            width: "60%"
        });
        /* remove any previous note editor created by summernote */
        t(`.el_${swalIdentifier} .note-editor.note-frame.card`).remove();
        t('textarea.summernote').summernote({
            /* set editable area's height */
            height: 150,
            spellCheck: true,
            toolbar: [
                ['style', ['bold', 'italic', 'underline', 'clear']],
                ['color', ['color']],
                ['para', ['ul', 'ol', 'paragraph']],
                ['view', ['codeview']],
                ['custom', ['insertBlank']]
            ],
            buttons: {
                insertBlank: insertBlankButton
            },
            callbacks: {
                onChange: function(contents) {
                    let answersCountFITB = 0;
                    let parentContainer = t(`.el_${swalIdentifier}`);
                    let previewElem = parentContainer.find('div.preview_div');
                    while (contents.indexOf('{blank}') > -1) {
                        let blankIdentifier = { 'name': `answer[${answersCountFITB}]`, 'id': `answer_${answersCountFITB}` };
                        /* get existing value of input if it has already been entered by user */
                        let dataAttribName = `data-answer_${answersCountFITB}`;
                        let inputVal = "";
                        if (previewElem.attr(dataAttribName)) {
                            inputVal = previewElem.attr(dataAttribName);
                        }
                        contents = contents.replace('{blank}', ` <textarea type="text" onkeyup="updateFITBPreviewAttrib(${answersCountFITB}, ${swalIdentifier})" name="${blankIdentifier.name}" id="${blankIdentifier.id}" class="form-control textareaField blankInput" value="">${inputVal}</textarea>`);
                        answersCountFITB++;
                    }
                    previewElem.html(contents);
                }
            }
        });
    }), t("body").on("change", ".js-switch", function() {
        var e = t(this);
        e.closest(".js-switch-parent");
        this.checked && (t(".js-switch").each(function() {
            t(this).closest(".js-switch-parent").find('input[type="checkbox"]').prop("checked", !1)
        }), e.prop("checked", !0))
    }), t("body").on("click", ".save-question", function(e) {
        e.preventDefault();
        var a = t(this),
            i = a.closest(".quiz-questions-form"),
            n = serializeObjectByTag(i),
            r = i.attr("data-action");
        a.addClass("loadingbar primary").prop("disabled", !0), i.find("input").removeClass("is-invalid"), i.find("textarea").removeClass("is-invalid"), t.post(r, n, function(t) {
            t && 200 === t.code && (Swal.fire({
                icon: "success",
                html: '<h3 class="font-20 text-center text-dark-blue py-25">' + saveSuccessLang + "</h3>",
                showConfirmButton: !1,
                width: "25rem"
            }), setTimeout(function() {
                window.location.reload()
            }, 500))
        }).fail(function(t) {
            a.removeClass("loadingbar primary").prop("disabled", !1);
            var e = t.responseJSON;
            e && e.errors && Object.keys(e.errors).forEach(function(t) {
                var a = e.errors[t],
                    n = i.find(".js-ajax-" + t);
                n.addClass("is-invalid"), n.parent().find(".invalid-feedback").text(a[0])
            })
        })
    }), t("body").on("click", ".edit_question", function(a) {
        a.preventDefault();
        let swalIdentifier = Math.floor(new Date().getTime() / 1000);
        var i = t(this).attr("data-question-id");
        loadingSwl(), t.get("/panel/quizzes-questions/" + i + "/edit", function(a) {
            if (a && a.html) {
                var i = '<div id="editQuestion">' + a.html + "</div>";
                Swal.fire({
                    html: i,
                    showCancelButton: !1,
                    showConfirmButton: !1,
                    customClass: {
                        content: `p-0 text-left el_${swalIdentifier}`
                    },
                    width: "60%",
                    onOpen: function() {
                        var a = t("#editQuestion");
                        a.find(".main-answer-row").removeClass("main-answer-row").addClass("main-answer-box");
                        var i = e();
                        a.find(".panel-file-manager").first().attr("data-input", i), a.find(".lfm-input").first().attr("id", i);
                        var n = "correctAnswerSwitch" + e();
                        a.find("label.js-switch").first().attr("for", n), a.find("input.js-switch").first().attr("id", n), feather.replace()
                    }
                });
                if (i.indexOf('fillBlankQuestionModal') && i.indexOf('summernote') > -1) {
                    t('textarea.summernote').summernote({
                        /* set editable area's height */
                        height: 150,
                        spellCheck: true,
                        toolbar: [
                            ['style', ['bold', 'italic', 'underline', 'clear']],
                            ['color', ['color']],
                            ['para', ['ul', 'ol', 'paragraph']],
                            ['view', ['codeview']],
                            ['custom', ['insertBlank']]
                        ],
                        buttons: {
                            insertBlank: insertBlankButton
                        },
                        callbacks: {
                            onChange: function(contents) {
                                let answersCountFITB = 0;
                                let parentContainer = t(`.el_${swalIdentifier}`);
                                let previewElem = parentContainer.find('div.preview_div');
                                while (contents.indexOf('{blank}') > -1) {
                                    let blankIdentifier = { 'name': `answer[${answersCountFITB}]`, 'id': `answer_${answersCountFITB}` };
                                    /* get existing value of input if it has already been entered by user */
                                    let dataAttribName = `data-answer_${answersCountFITB}`;
                                    let inputVal = ""
                                    if (previewElem.attr(dataAttribName)) {
                                        inputVal = previewElem.attr(dataAttribName);
                                    }
                                    contents = contents.replace('{blank}', ` <textarea type="text" onkeyup="updateFITBPreviewAttrib(${answersCountFITB}, ${swalIdentifier})" name="${blankIdentifier.name}" id="${blankIdentifier.id}" class="form-control textareaField blankInput" value=""> ${inputVal} </textarea>`);
                                    answersCountFITB++;
                                }

                                previewElem.html(contents);
                            },
                            onInit: function() {
                                let answersCountFITB = 0;
                                let parentContainer = t(`.el_${swalIdentifier}`);
                                let contents = t('.summernote', parentContainer).val();
                                let previewElem = parentContainer.find('div.preview_div');
                                while (contents.indexOf('{blank}') > -1) {
                                    let blankIdentifier = { 'name': `answer[${answersCountFITB}]`, 'id': `answer_${answersCountFITB}` };
                                    /* get existing value of input if it has already been entered by user */
                                    let dataAttribName = `data-answer_${answersCountFITB}`;
                                    let inputVal = ""
                                    if (previewElem.attr(dataAttribName)) {
                                        inputVal = previewElem.attr(dataAttribName);
                                    }
                                    contents = contents.replace('{blank}', ` <textarea type="text" onkeyup="updateFITBPreviewAttrib(${answersCountFITB}, ${swalIdentifier})" name="${blankIdentifier.name}" id="${blankIdentifier.id}" class="form-control textareaField blankInput" value=""> ${inputVal} </textarea>`);
                                    answersCountFITB++;
                                }
                                previewElem.html(contents);
                            }
                        }
                    });
                    t('textarea.summernote').trigger('summernote.change');
                }
            }
        })
    }), t("body").on("click", ".js-submit-quiz-form", function(e) {
        e.preventDefault();
        var a = t(this),
            i = a.closest(".quiz-form"),
            n = serializeObjectByTag(i),
            r = i.attr("data-action");
        a.addClass("loadingbar primary").prop("disabled", !0), i.find("input").removeClass("is-invalid"), i.find("textarea").removeClass("is-invalid"), t.post(r, n, function(t) {
            t && 200 === t.code && (Swal.fire({
                icon: "success",
                html: '<h3 class="font-20 text-center text-dark-blue">' + saveSuccessLang + "</h3>",
                showConfirmButton: !1
            }), setTimeout(function() {
                t.redirect_url && "" !== t.redirect_url ? window.location.href = t.redirect_url : window.location.reload()
            }, 2e3))
        }).fail(function(t) {
            a.removeClass("loadingbar primary").prop("disabled", !1);
            var e = t.responseJSON;
            e && e.errors && Object.keys(e.errors).forEach(function(t) {
                var a = e.errors[t],
                    n = i.find(".js-ajax-" + t);
                n.addClass("is-invalid"), n.parent().find(".invalid-feedback").text(a[0])
            })
        })
    }), t("body").on("change", ".js-ajax-webinar_id", function(e) {
        var a = "/panel/chapters/getAllByWebinarId/" + t(this).val(),
            i = t(".js-ajax-chapter_id");
        i.addClass("loadingbar gray"), t.get(a, function(t) {
            if (t && t.chapters) {
                var e = '<option value="">' + quizzesSectionLang + "</option>";
                Object.keys(t.chapters).forEach(function(a) {
                    var i = t.chapters[a];
                    e += '<option value="' + i.id + '">' + i.title + "</option>"
                }), i.removeClass("loadingbar gray"), i.html(e)
            }
        })
    }), t("body").on("change", ".js-ajax-chapter_id", function(e) {
        var a = "/panel/text-lesson/getAllLessonsByChapterId/" + t(this).val(),
            i = t(".js-ajax-lesson_id");
        i.addClass("loadingbar gray"), t.get(a, function(t) {
            var e = '<option value="">' + quizzesLessonLang + "</option>";
            if (t && t.data) {
                let lessons = t.data;
                for (let index = 0; index < lessons.length; index++) {
                    let lesson = lessons[index];
                    e += '<option value="' + lesson['id'] + '">' + lesson['title'] + "</option>"
                }
                i.removeClass("loadingbar gray"), i.html(e)
            }
        })
    }), t("body").on("click", "#add_matchingListText_question", function(e) {
        e.preventDefault();
        let swalIdentifier = Math.floor(new Date().getTime() / 1000);
        var a = t(this).attr("data-quiz-id"),
            i = t(".matchingListTextQuestionModal" + a).clone();
        Swal.fire({
            html: i.html(),
            showCancelButton: !1,
            showConfirmButton: !1,
            customClass: {
                content: `p-0 text-left el_${swalIdentifier}`
            },
            width: "60%"
        });
        t("body").on("click", `.el_${swalIdentifier} #add_text_pair`, function(e) {
            addPair(swalIdentifier, 'text');
        });
    }), t("body").on("click", "#add_matchingListImage_question", function(e) {
        e.preventDefault();
        let swalIdentifier = Math.floor(new Date().getTime() / 1000);
        var a = t(this).attr("data-quiz-id"),
            i = t(".matchingListImageQuestionModal" + a).clone();
        Swal.fire({
            html: i.html(),
            showCancelButton: !1,
            showConfirmButton: !1,
            customClass: {
                content: `p-0 text-left el_${swalIdentifier}`
            },
            width: "60%"
        });
        t("body").on("click", `.el_${swalIdentifier} #add_image_pair`, function(e) {
            addPair(swalIdentifier, 'image');
        });

    }), t("body").on("click", "#add_fileUpload", function(e) {
        e.preventDefault();
        // alert("clicked")
        let swalIdentifier = Math.floor(new Date().getTime() / 1000);
        var a = t(this).attr("data-quiz-id"),
            i = t(".fileUploadQuestionModal" + a).clone();
        Swal.fire({
            html: i.html(),
            showCancelButton: !1,
            showConfirmButton: !1,
            customClass: {
                content: `p-0 text-left el_${swalIdentifier}`
            },
            width: "60%"
        });
    })
}(jQuery);

var updateFITBPreviewAttrib = function(answerId, swalIdentifier) {
    let parentContainer = $(`.el_${swalIdentifier}`);
    let previewElem = parentContainer.find('div.preview_div');
    $answerElem = $(`input[name="answer[${answerId}]"]`, previewElem);
    let inputVal = $answerElem.val();
    let dataAttribName = `data-answer_${answerId}`;
    if (previewElem) {
        previewElem.attr(dataAttribName, inputVal);
    }
};
// var addPair = function(swalIdentifier, pairType) {
//     let parentContainer = null;
//     if (parseInt(swalIdentifier) > 0) {
//         parentContainer = $(`.el_${swalIdentifier}`);
//     } else {
//         parentContainer = $(`.${swalIdentifier}`);
//     }
//     pairIdentifierEl = $(`input[name='pairIdentifier']`, parentContainer);
//     pairIdentifier = parseInt(pairIdentifierEl.val());
//     pairIdentifier++;
//     if (pairType === 'text') {
//         let html = `<div class="col-3 pair_container">
//             <div id="pair_${pairIdentifier}" class="row matchingPair">
//                 <div class="col-12">
//                 <button type="button" class="removePair-btn btn btn-sm btn-background-transparent text-danger position-absolute" title="Remove Pair" onclick="removePair(${pairIdentifier}, ${swalIdentifier})" style="right:0; height:1em; font-size:1.5em"><span aria-hidden="true">&times;</span></button>
//                     <div class="form-group">
//                         <label class="input-label">${quizPairTextLabel}</label>
//                         <input type="text" name="answers[${pairIdentifier}][text]" class="form-control" required value="" />
//                     </div>
//                     <div class="form-group">
//                         <label class="input-label">${quizPairDescriptionLabel}</label>
//                         <textarea type="text" name="answers[${pairIdentifier}][description]" class="form-control" required ></textarea>
//                     </div>
//                 </div>
//             </div>
//         </div>`;
//         $('.matchingPairs', parentContainer).append(html);

//     } else {
//         let html = `<div class="col-3 pair_container">
//             <div id="pair_${pairIdentifier}" class="row matchingPair">
//                 <div class="col-12">
//                 <button type="button" class="removePair-btn btn btn-sm btn-background-transparent text-danger position-absolute" title="Remove Pair" onclick="removePair(${pairIdentifier}, ${swalIdentifier})" style="right:0; height:1em; font-size:1.5em"><span aria-hidden="true">&times;</span></button>
//                     <div class="form-group">
//                         <label class="input-label">${quizPairImageLabel}</label>
//                         <div class="dropzone mx-auto">
//                             <img src="/assets/default/img/upload.svg" id="preview_${pairIdentifier}" required class="upload-icon" />
//                             <input type="file" id="file_${pairIdentifier}" onchange="handleFileSelect(this, this.closest('.matchingListImageQuestionModal_modal') )" accept="image/*" name="answers[${pairIdentifier}][file]" required class="upload-input cursor-pointer" />
//                             <input type="hidden" name="answers[${pairIdentifier}][image]" id="image_${pairIdentifier}" required value="" />
//                         </div>
//                     </div>
//                     <div class="form-group">
//                         <label class="input-label">${quizPairTextLabel}</label>
//                         <input type="text" name="answers[${pairIdentifier}][text]" class="form-control" required />
//                     </div>
//                 </div>
//             </div>
//         </div>`;
//         $('.matchingPairs', parentContainer).append(html);
//     }

//     pairIdentifierEl.val(pairIdentifier);
// };

//functioin to add pairs
function addPair(swalIdentifier, pairType) {
    let parentContainer = null;
    if (parseInt(swalIdentifier) > 0) {
        parentContainer = $(`.el_${swalIdentifier}`);
    } else {
        parentContainer = $(`.${swalIdentifier}`);
    }
    pairIdentifierEl = $(`input[name='pairIdentifier']`, parentContainer);
    pairIdentifier = parseInt(pairIdentifierEl.val());
    pairIdentifier++;
    if (pairType === "text") {
        let html = `<div class="col-3 pair_container">
            <div id="pair_${pairIdentifier}" class="row matchingPair">
                <div class="col-12">
                <button type="button" class="removePair-btn btn btn-sm btn-background-transparent text-danger position-absolute" title="Remove Pair" onclick="removePair(${pairIdentifier}, ${swalIdentifier})" style="right:0; height:1em; font-size:1.5em"><span aria-hidden="true">&times;</span></button>
                    <div class="form-group">
                        <label class="input-label">Text</label>
                        <input type="text" name="answers[${pairIdentifier}][text]" class="form-control" required value="" />
                    </div>
                    <div class="form-group">
                        <label class="input-label">Description</label>
                        <textarea type="text" name="answers[${pairIdentifier}][description]" class="form-control" required ></textarea>
                    </div>
                </div>
            </div>
        </div>`;
        $(".matchingPairs", parentContainer).append(html);
    } else {
        let html = `<div class="col-3 pair_container">
                <div id="pair_${pairIdentifier}" class="row matchingPair">
                    <div class="col-12">
                    <button type="button" class="removePair-btn btn btn-sm btn-background-transparent text-danger position-absolute" title="Remove Pair" onclick="removePair(${pairIdentifier}, '${swalIdentifier}')" style="right:0; height:1em; font-size:1.5em"><span aria-hidden="true">&times;</span></button>
                        <div class="form-group">
                            <label class="input-label">Image</label>
                            <div class="dropzone mx-auto cursor-pointer" onclick="this.querySelector('input[type=file]').click();">
                                <img src="/assets/default/img/upload.svg" id="preview_${pairIdentifier}" required class="upload-icon" / width ="150" height= "350">
                                <input type="file" id="file_${pairIdentifier}" onchange="handleFileSelect(this, this.closest('.matchingListImageQuestionModal_modal') )" accept="image/*" name="answers[${pairIdentifier}][file]" required class="d-none upload-input cursor-pointer" />
                                <input type="hidden" name="answers[${pairIdentifier}][image]" id="image_${pairIdentifier}" required value="" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="input-label">Text</label>
                            <input type="text" name="answers[${pairIdentifier}][text]" class="form-control" required />
                        </div>
                    </div>
                </div>
            </div>`;
        $(".matchingPairs", parentContainer).append(html);
    }

    pairIdentifierEl.val(pairIdentifier);
}

var removePair = function(pairId, swalIdentifier) {

    let parentContainer = null;
    if (parseInt(swalIdentifier) > 0) {
        parentContainer = $(`.el_${swalIdentifier}`);
    } else {
        parentContainer = $(`.${swalIdentifier}`);
    }
    console.log(parentContainer);
    let elem = $(`#pair_${pairId}`, parentContainer);
    console.log(elem);
    let container = elem.closest('.pair_container');
    container.remove();
};


// function handleFileSelect(elem, elemModal) {
//     let elemId = elem.id;
//     let imgElKey = elemId.replace('file', 'image');
//     let previewElKey = elemId.replace('file', 'preview');
//     console.log(elemModal);
//     let base64Elem = $(`#${imgElKey}`, elemModal);
//     let previewElem = $(`#${previewElKey}`, elemModal);
//     console.log(base64Elem);
//     let f = elem.files[0]; /* FileList object */
//     let mimeType = f.type;
//     let reader = new FileReader();
//     /* Closure to capture the file information. */
//     reader.onload = (function(theFile) {
//         return function(e) {
//             let binaryData = e.target.result;
//             /* Converting Binary Data to base 64 */
//             let base64String = window.btoa(binaryData);
//             /* showing file converted to base64 */
//             let imgString = `data:${mimeType};base64,${base64String}`;
//             console.log(imgString);
//             base64Elem.val(`${imgString}`);
//             previewElem.attr('src', `${imgString}`);
//             previewElem.removeClass('upload-icon');
//             previewElem.addClass('my-auto');
//         };
//     })(f);
//     /* Read in the image file as a data URL. */
//     reader.readAsBinaryString(f);
// }

function handleFileSelect(elem, elemModal) {
    let elemId = elem.id;
    console.log(elemId);
    let imgElKey = elemId.replace("file", "image");
    let previewElKey = elemId.replace("file", "preview");
    console.log(previewElKey);
    let base64Elem = $(`#${imgElKey}`, elemModal);
    let previewElem = $(`#${previewElKey}`, elemModal);
    console.log(previewElem);
    console.log(base64Elem);
    let f = elem.files[0]; /* FileList object */
    console.log(f);
    let mimeType = f.type;
    let reader = new FileReader();
    /* Closure to capture the file information. */
    reader.onload = (function (theFile) {
        return function (e) {
            let binaryData = e.target.result;
            /* Converting Binary Data to base 64 */
            let base64String = window.btoa(binaryData);
            /* showing file converted to base64 */
            let imgString = `data:${mimeType};base64,${base64String}`;
            base64Elem.val(`${imgString}`);
            console.log(imgString);
            // previewElem.attr("src", `${imgString}`);
            previewElem.attr("src", `${imgString}`);
            previewElem.removeClass("upload-icon");
            previewElem.addClass("my-auto");
        };
    })(f);
    /* Read in the image file as a data URL. */
    reader.readAsBinaryString(f);
}

//function that will trigger on click of the image in image matching model

function inputFileClicked(currentElem)
{
    currentElem.querySelector(`input[type='file']`).click();
}

$("body").on("click", "#add_infoText_question", function(e) {
    e.preventDefault();
    const quiz_id = $(this).attr('data-quiz-id');

        // var multipleQuestionModal = $('.informativeQuestionModal' + quiz_id);
    let swalIdentifier = Math.floor(new Date().getTime() / 1000);

    // var informativeQuestionModal = $('.informativeQuestionModal' + quiz_id);

    var informativeQuestionModal = $("#informativeQuestionModal");
    var clone = informativeQuestionModal.clone();

    Swal.fire({
        html: clone.html(),
        showCancelButton: false,
        showConfirmButton: false,
        customClass: {
            content: `p-0 text-left el_${swalIdentifier}`
        },
        width: "48rem"
    });

    /* remove any previous note editor created by summernote */
    $(`.el_${swalIdentifier} .note-editor.note-frame.card`).remove();
    $("textarea.summernote").summernote({
        /* set editable area's height */
        height: 150,
        spellCheck: true,
        toolbar: [
            ["style", ["bold", "italic", "underline", "clear"]],
            ["color", ["color"]],
            ["para", ["ul", "ol", "paragraph"]],
            ["view", ["codeview"]]
        ],
        callbacks: {
            onChange: function(contents) {
                let answersCountFITB = 0;
                let parentContainer = $(`.el_${swalIdentifier}`);
                let previewElem = parentContainer.find("div.preview_div");
                previewElem.html(contents);
            }
        }
    });
});


